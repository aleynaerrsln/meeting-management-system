const User = require('../models/User');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const { sendPasswordResetEmail } = require('../services/emailService');

// JWT Token oluÅŸtur
const generateToken = (userId) => {
  return jwt.sign({ id: userId }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRE || '7d'
  });
};

// @desc    KullanÄ±cÄ± giriÅŸi
// @route   POST /api/auth/login
// @access  Public
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: 'E-posta ve ÅŸifre gereklidir' });
    }

    const user = await User.findOne({ email }).select('+password');

    if (!user) {
      return res.status(401).json({ message: 'GeÃ§ersiz e-posta veya ÅŸifre' });
    }

    if (!user.isActive) {
      return res.status(401).json({ message: 'HesabÄ±nÄ±z aktif deÄŸil. LÃ¼tfen yÃ¶neticinizle iletiÅŸime geÃ§in' });
    }

    const isPasswordValid = await user.comparePassword(password);

    if (!isPasswordValid) {
      return res.status(401).json({ message: 'GeÃ§ersiz e-posta veya ÅŸifre' });
    }

    user.lastLogin = Date.now();
    await user.save();

    const token = generateToken(user._id);

    const userResponse = user.toJSON();

    res.json({
      success: true,
      token,
      user: userResponse
    });
  } catch (error) {
    console.error('Login hatasÄ±:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: error.message });
  }
};

// @desc    Åžifre deÄŸiÅŸtirme
// @route   PUT /api/auth/change-password
// @access  Private
exports.changePassword = async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;

    if (!currentPassword || !newPassword) {
      return res.status(400).json({ message: 'Mevcut ÅŸifre ve yeni ÅŸifre gereklidir' });
    }

    if (newPassword.length < 6) {
      return res.status(400).json({ message: 'Yeni ÅŸifre en az 6 karakter olmalÄ±dÄ±r' });
    }

    const user = await User.findById(req.user._id).select('+password');

    const isMatch = await user.comparePassword(currentPassword);

    if (!isMatch) {
      return res.status(401).json({ message: 'Mevcut ÅŸifre hatalÄ±' });
    }

    user.password = newPassword;
    await user.save();

    res.json({ message: 'Åžifre baÅŸarÄ±yla deÄŸiÅŸtirildi' });
  } catch (error) {
    console.error('Åžifre deÄŸiÅŸtirme hatasÄ±:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: error.message });
  }
};

// @desc    Profil bilgilerini getir
// @route   GET /api/auth/profile
// @access  Private
exports.getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password');
    res.json(user);
  } catch (error) {
    console.error('Profil getirme hatasÄ±:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: error.message });
  }
};

// ðŸ†• @desc    Profil fotoÄŸrafÄ± yÃ¼kle
// @route   POST /api/auth/upload-profile-photo
// @access  Private
exports.uploadProfilePhoto = async (req, res) => {
  try {
    if (!req.files || !req.files.photo) {
      return res.status(400).json({ message: 'LÃ¼tfen bir fotoÄŸraf yÃ¼kleyin' });
    }

    const photo = req.files.photo;

    // Dosya tipi kontrolÃ¼
    if (!photo.mimetype.startsWith('image/')) {
      return res.status(400).json({ message: 'LÃ¼tfen sadece resim dosyasÄ± yÃ¼kleyin' });
    }

    // Dosya boyutu kontrolÃ¼ (5MB)
    if (photo.size > 5 * 1024 * 1024) {
      return res.status(400).json({ message: 'FotoÄŸraf boyutu 5MB\'dan kÃ¼Ã§Ã¼k olmalÄ±dÄ±r' });
    }

    const user = await User.findById(req.user._id);

    user.profilePhoto = {
      data: photo.data,
      contentType: photo.mimetype,
      uploadedAt: new Date()
    };

    await user.save();

    res.json({
      success: true,
      message: 'Profil fotoÄŸrafÄ± baÅŸarÄ±yla yÃ¼klendi',
      hasProfilePhoto: true
    });
  } catch (error) {
    console.error('Profil fotoÄŸrafÄ± yÃ¼kleme hatasÄ±:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: error.message });
  }
};

// ðŸ†• @desc    Profil fotoÄŸrafÄ±nÄ± getir
// @route   GET /api/auth/profile-photo/:userId
// @access  Public (herkes gÃ¶rebilsin)
exports.getProfilePhoto = async (req, res) => {
  try {
    const user = await User.findById(req.params.userId);

    if (!user || !user.profilePhoto || !user.profilePhoto.data) {
      return res.status(404).json({ message: 'Profil fotoÄŸrafÄ± bulunamadÄ±' });
    }

    res.set('Content-Type', user.profilePhoto.contentType);
    res.send(user.profilePhoto.data);
  } catch (error) {
    console.error('Profil fotoÄŸrafÄ± getirme hatasÄ±:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: error.message });
  }
};

// ðŸ†• @desc    Profil fotoÄŸrafÄ±nÄ± sil
// @route   DELETE /api/auth/profile-photo
// @access  Private
exports.deleteProfilePhoto = async (req, res) => {
  try {
    const user = await User.findById(req.user._id);

    user.profilePhoto = undefined;
    await user.save();

    res.json({
      success: true,
      message: 'Profil fotoÄŸrafÄ± silindi'
    });
  } catch (error) {
    console.error('Profil fotoÄŸrafÄ± silme hatasÄ±:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: error.message });
  }
};

// @desc    Åžifre sÄ±fÄ±rlama talebi
// @route   POST /api/auth/forgot-password
// @access  Public
exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ message: 'E-posta adresi gereklidir' });
    }

    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: 'Bu e-posta adresine kayÄ±tlÄ± kullanÄ±cÄ± bulunamadÄ±' });
    }

    const resetToken = crypto.randomBytes(32).toString('hex');
    const hashedToken = crypto.createHash('sha256').update(resetToken).digest('hex');

    user.resetPasswordToken = hashedToken;
    user.resetPasswordExpire = Date.now() + 60 * 60 * 1000; // 1 saat
    await user.save();

    try {
      await sendPasswordResetEmail(user, resetToken);
      res.json({ message: 'Åžifre sÄ±fÄ±rlama baÄŸlantÄ±sÄ± e-posta adresinize gÃ¶nderildi' });
    } catch (emailError) {
      user.resetPasswordToken = undefined;
      user.resetPasswordExpire = undefined;
      await user.save();

      console.error('E-posta gÃ¶nderme hatasÄ±:', emailError);
      return res.status(500).json({ message: 'E-posta gÃ¶nderilemedi. LÃ¼tfen daha sonra tekrar deneyin' });
    }
  } catch (error) {
    console.error('Åžifre sÄ±fÄ±rlama hatasÄ±:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: error.message });
  }
};

// @desc    Åžifre sÄ±fÄ±rlama
// @route   POST /api/auth/reset-password/:token
// @access  Public
exports.resetPassword = async (req, res) => {
  try {
    const { token } = req.params;
    const { password } = req.body;

    if (!password) {
      return res.status(400).json({ message: 'Yeni ÅŸifre gereklidir' });
    }

    if (password.length < 6) {
      return res.status(400).json({ message: 'Åžifre en az 6 karakter olmalÄ±dÄ±r' });
    }

    const hashedToken = crypto.createHash('sha256').update(token).digest('hex');

    const user = await User.findOne({
      resetPasswordToken: hashedToken,
      resetPasswordExpire: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({ message: 'GeÃ§ersiz veya sÃ¼resi dolmuÅŸ token' });
    }

    user.password = password;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;
    await user.save();

    res.json({ message: 'Åžifre baÅŸarÄ±yla sÄ±fÄ±rlandÄ±. ArtÄ±k giriÅŸ yapabilirsiniz' });
  } catch (error) {
    console.error('Åžifre sÄ±fÄ±rlama hatasÄ±:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: error.message });
  }
};
const XLSX = require('xlsx');
const WorkReport = require('../models/WorkReport');
const Meeting = require('../models/Meeting');
const User = require('../models/User');

// √áalƒ±≈üma raporlarƒ±nƒ± Excel'e aktar
exports.exportWorkReportsToExcel = async (filters = {}) => {
  try {
    const reports = await WorkReport.find(filters)
      .populate('user', 'firstName lastName email')
      .sort({ date: -1 });

    // Excel i√ßin veri hazƒ±rla
    const excelData = reports.map(report => ({
      'Tarih': new Date(report.date).toLocaleDateString('tr-TR'),
      'Kullanƒ±cƒ±': `${report.user.firstName} ${report.user.lastName}`,
      'Email': report.user.email,
      'Proje': report.project || '-',
      '√áalƒ±≈üma A√ßƒ±klamasƒ±': report.workDescription,
      'Saat': report.hoursWorked,
      'Durum': report.status,
      'Notlar': report.notes || '-',
      'Hafta': report.week,
      'Yƒ±l': report.year
    }));

    // Toplam saat hesapla
    const totalHours = reports.reduce((sum, r) => sum + r.hoursWorked, 0);
    
    // √ñzet satƒ±rƒ± ekle
    excelData.push({
      'Tarih': '',
      'Kullanƒ±cƒ±': 'TOPLAM',
      'Email': '',
      'Proje': '',
      '√áalƒ±≈üma A√ßƒ±klamasƒ±': '',
      'Saat': totalHours,
      'Durum': '',
      'Notlar': '',
      'Hafta': '',
      'Yƒ±l': ''
    });

    // Workbook olu≈ütur
    const ws = XLSX.utils.json_to_sheet(excelData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '√áalƒ±≈üma Raporlarƒ±');

    // S√ºtun geni≈ülikleri ayarla
    ws['!cols'] = [
      { wch: 12 }, // Tarih
      { wch: 20 }, // Kullanƒ±cƒ±
      { wch: 25 }, // Email
      { wch: 20 }, // Proje
      { wch: 40 }, // A√ßƒ±klama
      { wch: 8 },  // Saat
      { wch: 12 }, // Durum
      { wch: 30 }, // Notlar
      { wch: 8 },  // Hafta
      { wch: 8 }   // Yƒ±l
    ];

    // Buffer olarak d√∂n
    const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });
    return buffer;
  } catch (error) {
    console.error('Excel export hatasƒ±:', error);
    throw error;
  }
};

// Toplantƒ±larƒ± Excel'e aktar
exports.exportMeetingsToExcel = async (filters = {}) => {
  try {
    const meetings = await Meeting.find(filters)
      .populate('participants', 'firstName lastName email')
      .populate('createdBy', 'firstName lastName')
      .sort({ date: 1 });

    const excelData = meetings.map(meeting => ({
      'Toplantƒ± Adƒ±': meeting.title,
      'A√ßƒ±klama': meeting.description || '-',
      'Tarih': new Date(meeting.date).toLocaleDateString('tr-TR'),
      'Saat': meeting.time,
      'Yer': meeting.location,
      'Durum': meeting.status,
      'Olu≈üturan': `${meeting.createdBy.firstName} ${meeting.createdBy.lastName}`,
      'Katƒ±lƒ±mcƒ± Sayƒ±sƒ±': meeting.participants.length,
      'Katƒ±lƒ±mcƒ±lar': meeting.participants.map(p => `${p.firstName} ${p.lastName}`).join(', ')
    }));

    const ws = XLSX.utils.json_to_sheet(excelData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Toplantƒ±lar');

    ws['!cols'] = [
      { wch: 30 }, // Toplantƒ± Adƒ±
      { wch: 40 }, // A√ßƒ±klama
      { wch: 12 }, // Tarih
      { wch: 8 },  // Saat
      { wch: 20 }, // Yer
      { wch: 12 }, // Durum
      { wch: 20 }, // Olu≈üturan
      { wch: 12 }, // Katƒ±lƒ±mcƒ± Sayƒ±sƒ±
      { wch: 50 }  // Katƒ±lƒ±mcƒ±lar
    ];

    const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });
    return buffer;
  } catch (error) {
    console.error('Excel export hatasƒ±:', error);
    throw error;
  }
};

// Yoklama raporunu Excel'e aktar
exports.exportAttendanceToExcel = async (meetingId) => {
  try {
    const meeting = await Meeting.findById(meetingId)
      .populate('attendance.user', 'firstName lastName email')
      .populate('attendance.markedBy', 'firstName lastName');

    if (!meeting) {
      throw new Error('Toplantƒ± bulunamadƒ±');
    }

    const excelData = meeting.attendance.map(att => ({
      'Katƒ±lƒ±mcƒ±': `${att.user.firstName} ${att.user.lastName}`,
      'Email': att.user.email,
      'Durum': att.status === 'attended' ? 'Katƒ±ldƒ±' : att.status === 'not_attended' ? 'Katƒ±lmadƒ±' : 'Beklemede',
      'ƒ∞≈üaretlenme Tarihi': att.markedAt ? new Date(att.markedAt).toLocaleString('tr-TR') : '-',
      'ƒ∞≈üaretleyen': att.markedBy ? `${att.markedBy.firstName} ${att.markedBy.lastName}` : '-'
    }));

    // Ba≈ülƒ±k bilgisi ekle
    const headerData = [
      { 'Katƒ±lƒ±mcƒ±': 'TOPLANTI Bƒ∞LGƒ∞LERƒ∞' },
      { 'Katƒ±lƒ±mcƒ±': `Toplantƒ±: ${meeting.title}` },
      { 'Katƒ±lƒ±mcƒ±': `Tarih: ${new Date(meeting.date).toLocaleDateString('tr-TR')} - ${meeting.time}` },
      { 'Katƒ±lƒ±mcƒ±': `Yer: ${meeting.location}` },
      { 'Katƒ±lƒ±mcƒ±': '' }
    ];

    const ws = XLSX.utils.json_to_sheet([...headerData, ...excelData]);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Yoklama');

    ws['!cols'] = [
      { wch: 25 }, // Katƒ±lƒ±mcƒ±
      { wch: 30 }, // Email
      { wch: 15 }, // Durum
      { wch: 20 }, // ƒ∞≈üaretlenme Tarihi
      { wch: 20 }  // ƒ∞≈üaretleyen
    ];

    const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });
    return buffer;
  } catch (error) {
    console.error('Excel export hatasƒ±:', error);
    throw error;
  }
};

// Kullanƒ±cƒ± bazlƒ± verimlilik raporu
exports.exportProductivityReport = async (startDate, endDate) => {
  try {
    const users = await User.find({ isActive: true }).select('firstName lastName email');
    
    const reportData = await Promise.all(users.map(async (user) => {
      const reports = await WorkReport.find({
        user: user._id,
        date: { $gte: startDate, $lte: endDate },
        status: { $in: ['submitted', 'approved'] }
      });

      const totalHours = reports.reduce((sum, r) => sum + r.hoursWorked, 0);
      const workDays = reports.length;
      const avgHoursPerDay = workDays > 0 ? (totalHours / workDays).toFixed(2) : 0;

      return {
        'Kullanƒ±cƒ±': `${user.firstName} ${user.lastName}`,
        'Email': user.email,
        'Toplam Saat': totalHours,
        '√áalƒ±≈üma G√ºn√º': workDays,
        'G√ºnl√ºk Ortalama': avgHoursPerDay,
        'Rapor Sayƒ±sƒ±': reports.length
      };
    }));

    // Toplam saate g√∂re sƒ±rala
    reportData.sort((a, b) => b['Toplam Saat'] - a['Toplam Saat']);

    const ws = XLSX.utils.json_to_sheet(reportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Verimlilik Raporu');

    ws['!cols'] = [
      { wch: 25 }, // Kullanƒ±cƒ±
      { wch: 30 }, // Email
      { wch: 12 }, // Toplam Saat
      { wch: 12 }, // √áalƒ±≈üma G√ºn√º
      { wch: 15 }, // G√ºnl√ºk Ortalama
      { wch: 12 }  // Rapor Sayƒ±sƒ±
    ];

    const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });
    return buffer;
  } catch (error) {
    console.error('Verimlilik raporu export hatasƒ±:', error);
    throw error;
  }
};

// üëá YENƒ∞ FONKSƒ∞YON: Toplantƒ± notlarƒ±nƒ± rapor olarak Excel'e aktar
exports.exportMeetingNotesReport = async (meetingId) => {
  try {
    const meeting = await Meeting.findById(meetingId)
      .populate('participants', 'firstName lastName email')
      .populate('createdBy', 'firstName lastName')
      .populate('notes.createdBy', 'firstName lastName')
      .populate('attendance.user', 'firstName lastName email');

    if (!meeting) {
      throw new Error('Toplantƒ± bulunamadƒ±');
    }

    // Toplantƒ± ba≈ülƒ±k bilgileri
    const headerData = [
      { 'B√∂l√ºm': 'TOPLANTI RAPORU' },
      { 'B√∂l√ºm': '' },
      { 'B√∂l√ºm': 'Toplantƒ± Bilgileri:' },
      { 'B√∂l√ºm': `Toplantƒ± Adƒ±: ${meeting.title}` },
      { 'B√∂l√ºm': `Tarih: ${new Date(meeting.date).toLocaleDateString('tr-TR')} - ${meeting.time}` },
      { 'B√∂l√ºm': `Yer: ${meeting.location}` },
      { 'B√∂l√ºm': `Durum: ${meeting.status === 'scheduled' ? 'Planlandƒ±' : meeting.status === 'completed' ? 'Tamamlandƒ±' : 'ƒ∞ptal Edildi'}` },
      { 'B√∂l√ºm': `Olu≈üturan: ${meeting.createdBy.firstName} ${meeting.createdBy.lastName}` },
      { 'B√∂l√ºm': '' }
    ];

    // Katƒ±lƒ±m istatistikleri
    const attendedCount = meeting.attendance.filter(a => a.status === 'attended').length;
    const notAttendedCount = meeting.attendance.filter(a => a.status === 'not_attended').length;
    const pendingCount = meeting.attendance.filter(a => a.status === 'pending').length;

    const statsData = [
      { 'B√∂l√ºm': 'Katƒ±lƒ±m ƒ∞statistikleri:' },
      { 'B√∂l√ºm': `Toplam Katƒ±lƒ±mcƒ±: ${meeting.participants.length}` },
      { 'B√∂l√ºm': `‚úÖ Katƒ±lan: ${attendedCount}` },
      { 'B√∂l√ºm': `‚ùå Katƒ±lmayan: ${notAttendedCount}` },
      { 'B√∂l√ºm': `‚è≥ Bekleyen: ${pendingCount}` },
      { 'B√∂l√ºm': '' }
    ];

    // Notlar b√∂l√ºm√º
    const notesHeader = [
      { 'B√∂l√ºm': 'TOPLANTI NOTLARI' },
      { 'B√∂l√ºm': `Toplam Not Sayƒ±sƒ±: ${meeting.notes.length}` },
      { 'B√∂l√ºm': '' }
    ];

    let notesData = [];
    if (meeting.notes.length > 0) {
      meeting.notes.forEach((note, index) => {
        notesData.push({ 'B√∂l√ºm': `${index + 1}. NOT` });
        notesData.push({ 'B√∂l√ºm': `Ba≈ülƒ±k: ${note.title}` });
        notesData.push({ 'B√∂l√ºm': `ƒ∞√ßerik: ${note.content}` });
        notesData.push({ 
          'B√∂l√ºm': `Olu≈üturan: ${note.createdBy.firstName} ${note.createdBy.lastName}` 
        });
        notesData.push({ 
          'B√∂l√ºm': `Tarih: ${new Date(note.createdAt).toLocaleString('tr-TR')}` 
        });
        notesData.push({ 'B√∂l√ºm': '' });
      });
    } else {
      notesData.push({ 'B√∂l√ºm': 'Bu toplantƒ± i√ßin hen√ºz not eklenmemi≈ü.' });
    }

    // T√ºm verileri birle≈ütir
    const allData = [...headerData, ...statsData, ...notesHeader, ...notesData];

    // Workbook olu≈ütur
    const ws = XLSX.utils.json_to_sheet(allData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Toplantƒ± Raporu');

    // S√ºtun geni≈üliƒüini ayarla
    ws['!cols'] = [{ wch: 80 }];

    // Buffer olarak d√∂n
    const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });
    return buffer;
  } catch (error) {
    console.error('Not raporu export hatasƒ±:', error);
    throw error;
  }
};

module.exports = exports;